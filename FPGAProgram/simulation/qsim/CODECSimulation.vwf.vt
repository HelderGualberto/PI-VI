// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/26/2015 19:54:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CODECSystem
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CODECSystem_vlg_sample_tst(
	CPUCLK,
	DACDAT,
	sampler_tx
);
input  CPUCLK;
input [23:0] DACDAT;
output sampler_tx;

reg sample;
time current_time;
always @(CPUCLK or DACDAT)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CODECSystem_vlg_check_tst (
	c32,
	c64,
	int,
	sampler_rx
);
input  c32;
input  c64;
input [4:0] int;
input sampler_rx;

reg  c32_expected;
reg  c64_expected;
reg [4:0] int_expected;

reg  c32_prev;
reg  c64_prev;
reg [4:0] int_prev;

reg  c32_expected_prev;
reg  c64_expected_prev;
reg [4:0] int_expected_prev;

reg  last_c32_exp;
reg  last_c64_exp;
reg [4:0] last_int_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	c32_prev = c32;
	c64_prev = c64;
	int_prev = int;
end

// update expected /o prevs

always @(trigger)
begin
	c32_expected_prev = c32_expected;
	c64_expected_prev = c64_expected;
	int_expected_prev = int_expected;
end



// expected c32
initial
begin
	c32_expected = 1'bX;
	c32_expected = #999000 1'b0;
end 

// expected c64
initial
begin
	c64_expected = 1'bX;
	c64_expected = #999000 1'b0;
end 
// expected \int [ 4 ]
initial
begin
	int_expected[4] = 1'bX;
	int_expected[4] = #999000 1'b0;
end 
// expected \int [ 3 ]
initial
begin
	int_expected[3] = 1'bX;
	int_expected[3] = #999000 1'b0;
end 
// expected \int [ 2 ]
initial
begin
	int_expected[2] = 1'bX;
	int_expected[2] = #999000 1'b0;
end 
// expected \int [ 1 ]
initial
begin
	int_expected[1] = 1'bX;
	int_expected[1] = #999000 1'b0;
end 
// expected \int [ 0 ]
initial
begin
	int_expected[0] = 1'bX;
	int_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(c32_expected or c32 or c64_expected or c64 or int_expected or int)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c32 = %b | expected c64 = %b | expected int = %b | ",c32_expected_prev,c64_expected_prev,int_expected_prev);
	$display("| real c32 = %b | real c64 = %b | real int = %b | ",c32_prev,c64_prev,int_prev);
`endif
	if (
		( c32_expected_prev !== 1'bx ) && ( c32_prev !== c32_expected_prev )
		&& ((c32_expected_prev !== last_c32_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c32 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c32_expected_prev);
		$display ("     Real value = %b", c32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c32_exp = c32_expected_prev;
	end
	if (
		( c64_expected_prev !== 1'bx ) && ( c64_prev !== c64_expected_prev )
		&& ((c64_expected_prev !== last_c64_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c64 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c64_expected_prev);
		$display ("     Real value = %b", c64_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_c64_exp = c64_expected_prev;
	end
	if (
		( int_expected_prev[0] !== 1'bx ) && ( int_prev[0] !== int_expected_prev[0] )
		&& ((int_expected_prev[0] !== last_int_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port int[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", int_expected_prev);
		$display ("     Real value = %b", int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_int_exp[0] = int_expected_prev[0];
	end
	if (
		( int_expected_prev[1] !== 1'bx ) && ( int_prev[1] !== int_expected_prev[1] )
		&& ((int_expected_prev[1] !== last_int_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port int[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", int_expected_prev);
		$display ("     Real value = %b", int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_int_exp[1] = int_expected_prev[1];
	end
	if (
		( int_expected_prev[2] !== 1'bx ) && ( int_prev[2] !== int_expected_prev[2] )
		&& ((int_expected_prev[2] !== last_int_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port int[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", int_expected_prev);
		$display ("     Real value = %b", int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_int_exp[2] = int_expected_prev[2];
	end
	if (
		( int_expected_prev[3] !== 1'bx ) && ( int_prev[3] !== int_expected_prev[3] )
		&& ((int_expected_prev[3] !== last_int_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port int[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", int_expected_prev);
		$display ("     Real value = %b", int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_int_exp[3] = int_expected_prev[3];
	end
	if (
		( int_expected_prev[4] !== 1'bx ) && ( int_prev[4] !== int_expected_prev[4] )
		&& ((int_expected_prev[4] !== last_int_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port int[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", int_expected_prev);
		$display ("     Real value = %b", int_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_int_exp[4] = int_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CODECSystem_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CPUCLK;
reg [23:0] DACDAT;
// wires                                               
wire c32;
wire c64;
wire [4:0] int;

wire sampler;                             

// assign statements (if any)                          
CODECSystem i1 (
// port map - connection between master ports and signals/registers   
	.c32(c32),
	.c64(c64),
	.CPUCLK(CPUCLK),
	.DACDAT(DACDAT),
	.\int (int)
);

// CPUCLK
always
begin
	CPUCLK = 1'b0;
	CPUCLK = #10000 1'b1;
	#10000;
end 
// DACDAT[ 23 ]
initial
begin
	DACDAT[23] = 1'b0;
end 
// DACDAT[ 22 ]
initial
begin
	DACDAT[22] = 1'b0;
end 
// DACDAT[ 21 ]
initial
begin
	DACDAT[21] = 1'b0;
end 
// DACDAT[ 20 ]
initial
begin
	DACDAT[20] = 1'b0;
end 
// DACDAT[ 19 ]
initial
begin
	DACDAT[19] = 1'b0;
end 
// DACDAT[ 18 ]
initial
begin
	DACDAT[18] = 1'b0;
end 
// DACDAT[ 17 ]
initial
begin
	DACDAT[17] = 1'b0;
end 
// DACDAT[ 16 ]
initial
begin
	DACDAT[16] = 1'b0;
end 
// DACDAT[ 15 ]
initial
begin
	DACDAT[15] = 1'b0;
end 
// DACDAT[ 14 ]
initial
begin
	DACDAT[14] = 1'b0;
end 
// DACDAT[ 13 ]
initial
begin
	DACDAT[13] = 1'b0;
end 
// DACDAT[ 12 ]
initial
begin
	DACDAT[12] = 1'b0;
end 
// DACDAT[ 11 ]
initial
begin
	DACDAT[11] = 1'b0;
end 
// DACDAT[ 10 ]
initial
begin
	DACDAT[10] = 1'b0;
end 
// DACDAT[ 9 ]
initial
begin
	DACDAT[9] = 1'b0;
end 
// DACDAT[ 8 ]
initial
begin
	DACDAT[8] = 1'b0;
end 
// DACDAT[ 7 ]
initial
begin
	DACDAT[7] = 1'b0;
end 
// DACDAT[ 6 ]
initial
begin
	DACDAT[6] = 1'b0;
end 
// DACDAT[ 5 ]
initial
begin
	DACDAT[5] = 1'b0;
end 
// DACDAT[ 4 ]
initial
begin
	DACDAT[4] = 1'b0;
end 
// DACDAT[ 3 ]
initial
begin
	DACDAT[3] = 1'b0;
end 
// DACDAT[ 2 ]
initial
begin
	DACDAT[2] = 1'b0;
end 
// DACDAT[ 1 ]
initial
begin
	DACDAT[1] = 1'b0;
end 
// DACDAT[ 0 ]
initial
begin
	DACDAT[0] = 1'b0;
end 

CODECSystem_vlg_sample_tst tb_sample (
	.CPUCLK(CPUCLK),
	.DACDAT(DACDAT),
	.sampler_tx(sampler)
);

CODECSystem_vlg_check_tst tb_out(
	.c32(c32),
	.c64(c64),
	.int(int),
	.sampler_rx(sampler)
);
endmodule

