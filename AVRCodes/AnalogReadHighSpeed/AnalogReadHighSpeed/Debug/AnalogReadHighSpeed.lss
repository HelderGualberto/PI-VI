
AnalogReadHighSpeed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009d  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000062  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d6  00000000  00000000  00000285  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000014e  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  000004ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRD = 0b11111111;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b111111; // Set input or output
  84:	8f e3       	ldi	r24, 0x3F	; 63
  86:	84 b9       	out	0x04, r24	; 4
	ADCSRA |= (1 << ADEN); // Enable the ADC
  88:	ea e7       	ldi	r30, 0x7A	; 122
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2); // Set ADC frequency to 125kHz
  92:	80 81       	ld	r24, Z
  94:	87 60       	ori	r24, 0x07	; 7
  96:	80 83       	st	Z, r24
	ADMUX |= (0 << ADLAR); // Set the right justified MSB, located in ADCL (8 - MSB) and ADCH (2 - LSB). ADCL need to be read before ADCH 
  98:	ac e7       	ldi	r26, 0x7C	; 124
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	8c 91       	ld	r24, X
  9e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE);
  a0:	80 81       	ld	r24, Z
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	80 83       	st	Z, r24
	ADCSRB = (0 << ADTS0)|(0 << ADTS1)|(0 << ADTS2); // Set ADC to free running mode
  a6:	10 92 7b 00 	sts	0x007B, r1
	ADMUX |= (1 << REFS0)|(0 << REFS1);// Set the Vref to Internal VCC
  aa:	8c 91       	ld	r24, X
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	8c 93       	st	X, r24
	//ADMUX |= (0 << REFS0)|(0 << REFS1); // set the Vref to external Vcc in AREF
	ADMUX |= (0 << MUX3)|(0 << MUX2)|(0 << MUX1)|(0 << MUX0); // Select the analog channel (here A0) that will be used (A0 to A6)
  b0:	8c 91       	ld	r24, X
  b2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC); // Start ADC measurements
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
	UCSR0B = (0 << RXEN0)|(0 << TXEN0);
  ba:	e1 ec       	ldi	r30, 0xC1	; 193
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
	
	UCSR0B = (0 << TXEN0) | (0 << RXEN0);
  c0:	10 82       	st	Z, r1
	int8_t i = 0;
	
	
    while(1)
    {
		ADCSRA |= (1 << ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
		
		PORTD = ADCL;
  c6:	c8 e7       	ldi	r28, 0x78	; 120
  c8:	d0 e0       	ldi	r29, 0x00	; 0
		PORTB = ADCH;
  ca:	a9 e7       	ldi	r26, 0x79	; 121
  cc:	b0 e0       	ldi	r27, 0x00	; 0
	int8_t i = 0;
	
	
    while(1)
    {
		ADCSRA |= (1 << ADSC);
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
		
		PORTD = ADCL;
  d4:	88 81       	ld	r24, Y
  d6:	8b b9       	out	0x0b, r24	; 11
		PORTB = ADCH;
  d8:	8c 91       	ld	r24, X
  da:	85 b9       	out	0x05, r24	; 5
  dc:	f8 cf       	rjmp	.-16     	; 0xce <main+0x4e>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
