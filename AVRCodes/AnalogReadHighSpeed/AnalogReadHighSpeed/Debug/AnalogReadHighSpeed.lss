
AnalogReadHighSpeed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000087  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000053  00000000  00000000  000001f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ca  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000014e  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

int main(void)
{
	
	DDRB = 0b111111; // Set input or output
  80:	8f e3       	ldi	r24, 0x3F	; 63
  82:	84 b9       	out	0x04, r24	; 4
	ADCSRA |= (1 << ADEN); // Enable the ADC
  84:	ea e7       	ldi	r30, 0x7A	; 122
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2); // Set ADC frequency to 125kHz
  8e:	80 81       	ld	r24, Z
  90:	87 60       	ori	r24, 0x07	; 7
  92:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Set the left justified MSB, located in ADCH (8 - MSB) and ADCL (2 - LSB).
  94:	ac e7       	ldi	r26, 0x7C	; 124
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	8c 91       	ld	r24, X
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	8c 93       	st	X, r24
	//ADMUX |= 1 << REFS0; // Set the Vref to an external VCC in AREF
	ADCSRA |= (1 << ADATE);
  9e:	80 81       	ld	r24, Z
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	80 83       	st	Z, r24
	ADCSRB = (0 << ADTS0)|(0 << ADTS1)|(0 << ADTS2); // Set ADC to free running mode
  a4:	10 92 7b 00 	sts	0x007B, r1
	ADMUX |= (1 << REFS0)|(0 << REFS1);// Set the Vref to Internal VCC
  a8:	8c 91       	ld	r24, X
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8c 93       	st	X, r24
	ADMUX |= (0 << MUX3)|(0 << MUX2)|(0 << MUX1)|(0 << MUX0); // Select the analog channel (here A0) that will be used (A0 to A6)
  ae:	8c 91       	ld	r24, X
  b0:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC); // Start ADC measurements
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
		/*if(ADCH > 100)
			PORTB = 0b100000;
		else
			PORTB = 0b000000;
		*/
		PORTB = ADCH;
  b8:	e9 e7       	ldi	r30, 0x79	; 121
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	85 b9       	out	0x05, r24	; 5
  c0:	fd cf       	rjmp	.-6      	; 0xbc <main+0x3c>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
